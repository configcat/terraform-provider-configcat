name: Release
on:
  push:
    tags:
      - 'v*'
jobs:
 
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v5
      with:
        go-version: 1.21.0
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
        go mod vendor

    - name: Build
      run: go build -v .

    - name: Test
      env:
        CONFIGCAT_BASE_PATH: ${{ secrets.CONFIGCAT_BASE_PATH }}
        CONFIGCAT_BASIC_AUTH_PASSWORD: ${{ secrets.CONFIGCAT_BASIC_AUTH_PASSWORD }}
        CONFIGCAT_BASIC_AUTH_USERNAME: ${{ secrets.CONFIGCAT_BASIC_AUTH_USERNAME }}
        TF_ACC: true
      run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella

  goreleaser:
    needs: build
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21.0
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}