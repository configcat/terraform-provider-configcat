/*
 * ConfigCat Public Management API
 *
 * **Base API URL**: https://localhost    If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).    The purpose of this API is to access the ConfigCat platform programmatically.   You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.     The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON   and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).      # OpenAPI Specification    The complete specification is publicly available here: [swagger.json](v1/swagger.json).   You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or  [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.    # Authentication  This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).     <!-- ReDoc-Inject: <security-definitions> -->    # Throttling and rate limits  All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:    | Header | Description |  | :- | :- |  | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. |  | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |    When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.
 *
 * API version: v1
 * Contact: support@configcat.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package configcatpublicapi

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type FeatureFlagSettingValuesUsingSDKKeyApiService service

/*
FeatureFlagSettingValuesUsingSDKKeyApiService Get value
This endpoint returns the value of a Feature Flag or Setting   in a specified Environment identified by the &lt;a target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot; href&#x3D;\&quot;https://app.configcat.com/sdkkey\&quot;&gt;SDK key&lt;/a&gt; passed in the &#x60;X-CONFIGCAT-SDKKEY&#x60; header.    The most important attributes in the response are the &#x60;value&#x60;, &#x60;rolloutRules&#x60; and &#x60;percentageRules&#x60;.  The &#x60;value&#x60; represents what the clients will get when the evaluation requests of our SDKs   are not matching to any of the defined Targeting or Percentage Rules, or when there are no additional rules to evaluate.    The &#x60;rolloutRules&#x60; and &#x60;percentageRules&#x60; attributes are representing the current   Targeting and Percentage Rules configuration of the actual Feature Flag or Setting   in an **ordered** collection, which means the order of the returned rules is matching to the  evaluation order. You can read more about these rules [here](https://configcat.com/docs/advanced/targeting/).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param settingKeyOrId The key or id of the Setting.
 * @param xCONFIGCATSDKKEY The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
@return SettingValueModel
*/
func (a *FeatureFlagSettingValuesUsingSDKKeyApiService) GetSettingValueBySdkkey(ctx context.Context, settingKeyOrId string, xCONFIGCATSDKKEY string) (SettingValueModel, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue SettingValueModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/settings/{settingKeyOrId}/value"
	localVarPath = strings.Replace(localVarPath, "{"+"settingKeyOrId"+"}", fmt.Sprintf("%v", settingKeyOrId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/hal+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["X-CONFIGCAT-SDKKEY"] = parameterToString(xCONFIGCATSDKKEY, "")
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v SettingValueModel
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
FeatureFlagSettingValuesUsingSDKKeyApiService Replace value
This endpoint replaces the value of a Feature Flag or Setting   in a specified Environment identified by the &lt;a target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot; href&#x3D;\&quot;https://app.configcat.com/sdkkey\&quot;&gt;SDK key&lt;/a&gt; passed in the &#x60;X-CONFIGCAT-SDKKEY&#x60; header.    Only the &#x60;value&#x60;, &#x60;rolloutRules&#x60; and &#x60;percentageRules&#x60; attributes are modifiable by this endpoint.    **Important:** As this endpoint is doing a complete replace, it&#x27;s important to set every other attribute that you don&#x27;t   want to change to its original state. Not listing one means that it will reset.    For example: We have the following resource.  &#x60;&#x60;&#x60;  {   \&quot;rolloutPercentageItems\&quot;: [    {     \&quot;percentage\&quot;: 30,     \&quot;value\&quot;: true    },    {     \&quot;percentage\&quot;: 70,     \&quot;value\&quot;: false    }   ],   \&quot;rolloutRules\&quot;: [],   \&quot;value\&quot;: false  }  &#x60;&#x60;&#x60;  If we send a replace request body as below:  &#x60;&#x60;&#x60;  {   \&quot;value\&quot;: true  }  &#x60;&#x60;&#x60;  Then besides that the default served value is set to &#x60;true&#x60;, all the Percentage Rules are deleted.   So we get a response like this:  &#x60;&#x60;&#x60;  {   \&quot;rolloutPercentageItems\&quot;: [],   \&quot;rolloutRules\&quot;: [],   \&quot;value\&quot;: true  }  &#x60;&#x60;&#x60;
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
 * @param xCONFIGCATSDKKEY The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
 * @param settingKeyOrId The key or id of the Setting.
 * @param optional nil or *FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyOpts - Optional Parameters:
     * @param "Reason" (optional.String) -  The reason note for the Audit Log if the Product&#x27;s \&quot;Config changes require a reason\&quot; preference is turned on.
@return SettingValueModel
*/

type FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyOpts struct {
	Reason optional.String
}

func (a *FeatureFlagSettingValuesUsingSDKKeyApiService) ReplaceSettingValueBySdkkey(ctx context.Context, body UpdateSettingValueModel, xCONFIGCATSDKKEY string, settingKeyOrId string, localVarOptionals *FeatureFlagSettingValuesUsingSDKKeyApiReplaceSettingValueBySdkkeyOpts) (SettingValueModel, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Put")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue SettingValueModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/settings/{settingKeyOrId}/value"
	localVarPath = strings.Replace(localVarPath, "{"+"settingKeyOrId"+"}", fmt.Sprintf("%v", settingKeyOrId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Reason.IsSet() {
		localVarQueryParams.Add("reason", parameterToString(localVarOptionals.Reason.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/hal+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["X-CONFIGCAT-SDKKEY"] = parameterToString(xCONFIGCATSDKKEY, "")
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v SettingValueModel
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
FeatureFlagSettingValuesUsingSDKKeyApiService Update value
This endpoint updates the value of a Feature Flag or Setting   with a collection of [JSON Patch](http://jsonpatch.com) operations in a specified Environment  identified by the &lt;a target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener noreferrer\&quot; href&#x3D;\&quot;https://app.configcat.com/sdkkey\&quot;&gt;SDK key&lt;/a&gt; passed in the &#x60;X-CONFIGCAT-SDKKEY&#x60; header.    Only the &#x60;value&#x60;, &#x60;rolloutRules&#x60; and &#x60;percentageRules&#x60; attributes are modifiable by this endpoint.    The advantage of using JSON Patch is that you can describe individual update operations on a resource  without touching attributes that you don&#x27;t want to change. It supports collection reordering, so it also   can be used for reordering the targeting rules of a Feature Flag or Setting.    For example: We have the following resource.  &#x60;&#x60;&#x60;  {   \&quot;rolloutPercentageItems\&quot;: [    {     \&quot;percentage\&quot;: 30,     \&quot;value\&quot;: true    },    {     \&quot;percentage\&quot;: 70,     \&quot;value\&quot;: false    }   ],   \&quot;rolloutRules\&quot;: [],   \&quot;value\&quot;: false  }  &#x60;&#x60;&#x60;  If we send an update request body as below:  &#x60;&#x60;&#x60;  [   {    \&quot;op\&quot;: \&quot;replace\&quot;,    \&quot;path\&quot;: \&quot;/value\&quot;,    \&quot;value\&quot;: true   }  ]  &#x60;&#x60;&#x60;  Only the default served value is going to be set to &#x60;true&#x60; and all the Percentage Rules are remaining unchanged.  So we get a response like this:  &#x60;&#x60;&#x60;  {   \&quot;rolloutPercentageItems\&quot;: [    {     \&quot;percentage\&quot;: 30,     \&quot;value\&quot;: true    },    {     \&quot;percentage\&quot;: 70,     \&quot;value\&quot;: false    }   ],   \&quot;rolloutRules\&quot;: [],   \&quot;value\&quot;: true  }  &#x60;&#x60;&#x60;
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param body
 * @param xCONFIGCATSDKKEY The ConfigCat SDK Key. (https://app.configcat.com/sdkkey)
 * @param settingKeyOrId The key or id of the Setting.
 * @param optional nil or *FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyOpts - Optional Parameters:
     * @param "Reason" (optional.String) -  The reason note for the Audit Log if the Product&#x27;s \&quot;Config changes require a reason\&quot; preference is turned on.
@return SettingValueModel
*/

type FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyOpts struct {
	Reason optional.String
}

func (a *FeatureFlagSettingValuesUsingSDKKeyApiService) UpdateSettingValueBySdkkey(ctx context.Context, body []Operation, xCONFIGCATSDKKEY string, settingKeyOrId string, localVarOptionals *FeatureFlagSettingValuesUsingSDKKeyApiUpdateSettingValueBySdkkeyOpts) (SettingValueModel, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Patch")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue SettingValueModel
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/v1/settings/{settingKeyOrId}/value"
	localVarPath = strings.Replace(localVarPath, "{"+"settingKeyOrId"+"}", fmt.Sprintf("%v", settingKeyOrId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Reason.IsSet() {
		localVarQueryParams.Add("reason", parameterToString(localVarOptionals.Reason.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/hal+json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarHeaderParams["X-CONFIGCAT-SDKKEY"] = parameterToString(xCONFIGCATSDKKEY, "")
	// body params
	localVarPostBody = &body
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v SettingValueModel
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
