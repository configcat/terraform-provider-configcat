/*
 * ConfigCat Public Management API
 *
 * **Base API URL**: https://localhost    If you prefer the swagger documentation, you can find it here: [Swagger UI](https://api.configcat.com/swagger).    The purpose of this API is to access the ConfigCat platform programmatically.   You can **Create**, **Read**, **Update** and **Delete** any entities like **Feature Flags, Configs, Environments** or **Products** within ConfigCat.     The API is based on HTTP REST, uses resource-oriented URLs, status codes and supports JSON   and JSON+HAL format. Do not use this API for accessing and evaluating feature flag values. Use the [SDKs instead](https://configcat.com/docs/sdk-reference/overview).      # OpenAPI Specification    The complete specification is publicly available here: [swagger.json](v1/swagger.json).   You can use it to generate client libraries in various languages with [OpenAPI Generator](https://github.com/OpenAPITools/openapi-generator) or  [Swagger Codegen](https://swagger.io/tools/swagger-codegen/) to interact with this API.    # Authentication  This API uses the [Basic HTTP Authentication Scheme](https://en.wikipedia.org/wiki/Basic_access_authentication).     <!-- ReDoc-Inject: <security-definitions> -->    # Throttling and rate limits  All the rate limited API calls are returning information about the current rate limit period in the following HTTP headers:    | Header | Description |  | :- | :- |  | X-Rate-Limit-Remaining | The maximum number of requests remaining in the current rate limit period. |  | X-Rate-Limit-Reset     | The time when the current rate limit period resets.        |    When the rate limit is exceeded by a request, the API returns with a `HTTP 429 - Too many requests` status along with a `Retry-After` HTTP header.  
 *
 * API version: v1
 * Contact: support@configcat.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package configcatpublicapi

import (
	"net/http"
)

type APIResponse struct {
	*http.Response `json:"-"`
	Message        string `json:"message,omitempty"`
	// Operation is the name of the swagger operation.
	Operation string `json:"operation,omitempty"`
	// RequestURL is the request URL. This value is always available, even if the
	// embedded *http.Response is nil.
	RequestURL string `json:"url,omitempty"`
	// Method is the HTTP method used for the request.  This value is always
	// available, even if the embedded *http.Response is nil.
	Method string `json:"method,omitempty"`
	// Payload holds the contents of the response body (which may be nil or empty).
	// This is provided here as the raw response.Body() reader will have already
	// been drained.
	Payload []byte `json:"-"`
}

func NewAPIResponse(r *http.Response) *APIResponse {

	response := &APIResponse{Response: r}
	return response
}

func NewAPIResponseWithError(errorMessage string) *APIResponse {

	response := &APIResponse{Message: errorMessage}
	return response
}
