package configcat

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/config"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
)

func TestAccPermissionGroupResource(t *testing.T) {
	const productId = "08d86d63-2721-4da6-8c06-584521d516bc"
	const environment1Id = "08d86d63-2726-47cd-8bfc-59608ecb91e2"
	const environment2Id = "08d8becf-d4d9-4c66-8b48-6ac74cd95fba"
	const environment3Id = "08d86d63-272c-4355-8027-4b52787bc1bd"
	const testResourceName = "configcat_permission_group.test"

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id": config.StringVariable(productId),
					"name":       config.StringVariable("Resource name"),
					"accesstype": config.StringVariable("full"),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet(testResourceName, ID),
					resource.TestCheckResourceAttr(testResourceName, Name, "Resource name"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupAccessType, "full"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupNewEnvironmentAccessType, "none"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+".%", "0"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageMembers, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateConfig, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteConfig, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateEnvironment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteEnvironment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateSetting, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanTagSetting, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteSetting, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateTag, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteTag, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageWebhook, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanUseExportImport, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageProductPreferences, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageIntegrations, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewSdkKey, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanRotateSdkKey, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateSegment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteSegment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewProductAuditLogs, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewProductStatistics, "false"),
				),
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id": config.StringVariable(productId),
					"name":       config.StringVariable("Resource name"),
					"accesstype": config.StringVariable("full"),
				},
				ResourceName:      testResourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id": config.StringVariable(productId),
					"name":       config.StringVariable("Resource name"),
					"accesstype": config.StringVariable("full"),
				},
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(testResourceName, plancheck.ResourceActionNoop),
					},
				},
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id":                config.StringVariable(productId),
					"name":                      config.StringVariable("Resource name"),
					"accesstype":                config.StringVariable("full"),
					"can_createorupdate_config": config.BoolVariable(false),
				},
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(testResourceName, plancheck.ResourceActionNoop),
					},
				},
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id":                     config.StringVariable(productId),
					"name":                           config.StringVariable("Resource name"),
					"accesstype":                     config.StringVariable("full"),
					"can_createorupdate_config":      config.BoolVariable(true),
					"can_createorupdate_environment": config.BoolVariable(true),
					"can_delete_environment":         config.BoolVariable(true),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet(testResourceName, ID),
					resource.TestCheckResourceAttr(testResourceName, Name, "Resource name"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupAccessType, "full"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupNewEnvironmentAccessType, "none"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+".%", "0"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageMembers, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateConfig, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteConfig, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateEnvironment, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteEnvironment, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateSetting, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanTagSetting, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteSetting, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateTag, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteTag, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageWebhook, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanUseExportImport, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageProductPreferences, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageIntegrations, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewSdkKey, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanRotateSdkKey, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateSegment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteSegment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewProductAuditLogs, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewProductStatistics, "false"),
				),
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id":                     config.StringVariable(productId),
					"name":                           config.StringVariable("Resource name"),
					"accesstype":                     config.StringVariable("full"),
					"can_manage_members":             config.BoolVariable(true),
					"can_delete_config":              config.BoolVariable(false),
					"can_createorupdate_environment": config.BoolVariable(true),
					"can_delete_environment":         config.BoolVariable(false),
					"can_createorupdate_setting":     config.BoolVariable(true),
					"can_tag_setting":                config.BoolVariable(true),
					"can_delete_setting":             config.BoolVariable(false),
					"can_createorupdate_tag":         config.BoolVariable(true),
					"can_delete_tag":                 config.BoolVariable(false),
					"can_manage_webhook":             config.BoolVariable(true),
					"can_use_exportimport":           config.BoolVariable(false),
					"can_manage_product_preferences": config.BoolVariable(true),
					"can_manage_integrations":        config.BoolVariable(false),
					"can_view_sdkkey":                config.BoolVariable(true),
					"can_rotate_sdkkey":              config.BoolVariable(false),
					"can_createorupdate_segment":     config.BoolVariable(true),
					"can_delete_segment":             config.BoolVariable(false),
					"can_view_product_auditlog":      config.BoolVariable(true),
					"can_view_product_statistics":    config.BoolVariable(false),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet(testResourceName, ID),
					resource.TestCheckResourceAttr(testResourceName, Name, "Resource name"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupAccessType, "full"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupNewEnvironmentAccessType, "none"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+".%", "0"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageMembers, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateConfig, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteConfig, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateEnvironment, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteEnvironment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateSetting, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanTagSetting, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteSetting, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateTag, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteTag, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageWebhook, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanUseExportImport, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageProductPreferences, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageIntegrations, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewSdkKey, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanRotateSdkKey, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateSegment, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteSegment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewProductAuditLogs, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewProductStatistics, "false"),
				),
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id":                     config.StringVariable(productId),
					"name":                           config.StringVariable("Resource name"),
					"accesstype":                     config.StringVariable("full"),
					"can_manage_members":             config.BoolVariable(true),
					"can_delete_config":              config.BoolVariable(false),
					"can_createorupdate_environment": config.BoolVariable(true),
					"can_delete_environment":         config.BoolVariable(false),
					"can_createorupdate_setting":     config.BoolVariable(true),
					"can_tag_setting":                config.BoolVariable(true),
					"can_delete_setting":             config.BoolVariable(false),
					"can_createorupdate_tag":         config.BoolVariable(true),
					"can_delete_tag":                 config.BoolVariable(false),
					"can_manage_webhook":             config.BoolVariable(true),
					"can_use_exportimport":           config.BoolVariable(false),
					"can_manage_product_preferences": config.BoolVariable(true),
					"can_manage_integrations":        config.BoolVariable(false),
					"can_view_sdkkey":                config.BoolVariable(true),
					"can_rotate_sdkkey":              config.BoolVariable(false),
					"can_createorupdate_segment":     config.BoolVariable(true),
					"can_delete_segment":             config.BoolVariable(false),
					"can_view_product_auditlog":      config.BoolVariable(true),
					"can_view_product_statistics":    config.BoolVariable(false),
				},
				ResourceName:      testResourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id":                     config.StringVariable(productId),
					"name":                           config.StringVariable("Resource name"),
					"accesstype":                     config.StringVariable("full"),
					"can_manage_members":             config.BoolVariable(true),
					"can_createorupdate_config":      config.BoolVariable(true),
					"can_delete_config":              config.BoolVariable(true),
					"can_createorupdate_environment": config.BoolVariable(true),
					"can_delete_environment":         config.BoolVariable(true),
					"can_createorupdate_setting":     config.BoolVariable(true),
					"can_tag_setting":                config.BoolVariable(true),
					"can_delete_setting":             config.BoolVariable(true),
					"can_createorupdate_tag":         config.BoolVariable(true),
					"can_delete_tag":                 config.BoolVariable(true),
					"can_manage_webhook":             config.BoolVariable(true),
					"can_use_exportimport":           config.BoolVariable(true),
					"can_manage_product_preferences": config.BoolVariable(true),
					"can_manage_integrations":        config.BoolVariable(true),
					"can_view_sdkkey":                config.BoolVariable(true),
					"can_rotate_sdkkey":              config.BoolVariable(true),
					"can_createorupdate_segment":     config.BoolVariable(true),
					"can_delete_segment":             config.BoolVariable(true),
					"can_view_product_auditlog":      config.BoolVariable(true),
					"can_view_product_statistics":    config.BoolVariable(true),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet(testResourceName, ID),
					resource.TestCheckResourceAttr(testResourceName, Name, "Resource name"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupAccessType, "full"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupNewEnvironmentAccessType, "none"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+".%", "0"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageMembers, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateConfig, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteConfig, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateEnvironment, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteEnvironment, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateSetting, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanTagSetting, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteSetting, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateTag, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteTag, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageWebhook, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanUseExportImport, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageProductPreferences, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageIntegrations, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewSdkKey, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanRotateSdkKey, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateSegment, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteSegment, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewProductAuditLogs, "true"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewProductStatistics, "true"),
				),
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id":                     config.StringVariable(productId),
					"name":                           config.StringVariable("Resource name"),
					"accesstype":                     config.StringVariable("full"),
					"can_manage_members":             config.BoolVariable(true),
					"can_createorupdate_config":      config.BoolVariable(true),
					"can_delete_config":              config.BoolVariable(true),
					"can_createorupdate_environment": config.BoolVariable(true),
					"can_delete_environment":         config.BoolVariable(true),
					"can_createorupdate_setting":     config.BoolVariable(true),
					"can_tag_setting":                config.BoolVariable(true),
					"can_delete_setting":             config.BoolVariable(true),
					"can_createorupdate_tag":         config.BoolVariable(true),
					"can_delete_tag":                 config.BoolVariable(true),
					"can_manage_webhook":             config.BoolVariable(true),
					"can_use_exportimport":           config.BoolVariable(true),
					"can_manage_product_preferences": config.BoolVariable(true),
					"can_manage_integrations":        config.BoolVariable(true),
					"can_view_sdkkey":                config.BoolVariable(true),
					"can_rotate_sdkkey":              config.BoolVariable(true),
					"can_createorupdate_segment":     config.BoolVariable(true),
					"can_delete_segment":             config.BoolVariable(true),
					"can_view_product_auditlog":      config.BoolVariable(true),
					"can_view_product_statistics":    config.BoolVariable(true),
				},
				ResourceName:      testResourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id":                 config.StringVariable(productId),
					"name":                       config.StringVariable("Resource name"),
					"accesstype":                 config.StringVariable("readOnly"),
					"new_environment_accesstype": config.StringVariable("full"),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet(testResourceName, ID),
					resource.TestCheckResourceAttr(testResourceName, Name, "Resource name"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupAccessType, "readOnly"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupNewEnvironmentAccessType, "full"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+".%", "0"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageMembers, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateConfig, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteConfig, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateEnvironment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteEnvironment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateSetting, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanTagSetting, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteSetting, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateTag, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteTag, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageWebhook, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanUseExportImport, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageProductPreferences, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanManageIntegrations, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewSdkKey, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanRotateSdkKey, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanCreateOrUpdateSegment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanDeleteSegment, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewProductAuditLogs, "false"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupCanViewProductStatistics, "false"),
				),
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id": config.StringVariable(productId),
					"name":       config.StringVariable("Resource name"),
					"environment_accesses": config.MapVariable(map[string]config.Variable{
						environment1Id: config.StringVariable("readOnly"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet(testResourceName, ID),
					resource.TestCheckResourceAttr(testResourceName, Name, "Resource name"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupAccessType, "custom"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupNewEnvironmentAccessType, "none"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+".%", "1"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+"."+environment1Id, "readOnly"),
				),
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id": config.StringVariable(productId),
					"name":       config.StringVariable("Resource name"),
					"environment_accesses": config.MapVariable(map[string]config.Variable{
						environment1Id: config.StringVariable("readOnly"),
					}),
				},
				ResourceName:      testResourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id": config.StringVariable(productId),
					"name":       config.StringVariable("Resource name"),
					"environment_accesses": config.MapVariable(map[string]config.Variable{
						environment2Id: config.StringVariable("readOnly"),
						environment3Id: config.StringVariable("full"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet(testResourceName, ID),
					resource.TestCheckResourceAttr(testResourceName, Name, "Resource name"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupAccessType, "custom"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupNewEnvironmentAccessType, "none"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+".%", "2"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+"."+environment2Id, "readOnly"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+"."+environment3Id, "full"),
				),
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id": config.StringVariable(productId),
					"name":       config.StringVariable("Resource name"),
					"environment_accesses": config.MapVariable(map[string]config.Variable{
						environment2Id: config.StringVariable("readOnly"),
						environment3Id: config.StringVariable("full"),
					}),
				},
				ResourceName:      testResourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id": config.StringVariable(productId),
					"name":       config.StringVariable("Resource name"),
					"environment_accesses": config.MapVariable(map[string]config.Variable{
						environment1Id: config.StringVariable("readOnly"),
					}),
				},
				Check: resource.ComposeAggregateTestCheckFunc(
					resource.TestCheckResourceAttrSet(testResourceName, ID),
					resource.TestCheckResourceAttr(testResourceName, Name, "Resource name"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupAccessType, "custom"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupNewEnvironmentAccessType, "none"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+".%", "1"),
					resource.TestCheckResourceAttr(testResourceName, PermissionGroupEnvironmentAccess+"."+environment1Id, "readOnly"),
				),
			},
			{
				ConfigFile: config.TestNameFile("main.tf"),
				ConfigVariables: config.Variables{
					"product_id": config.StringVariable(productId),
					"name":       config.StringVariable("Resource name"),
					"environment_accesses": config.MapVariable(map[string]config.Variable{
						environment1Id: config.StringVariable("readOnly"),
					}),
				},
				ResourceName:      testResourceName,
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}
